<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>子正博客</title><link>https://Abner1995.github.io</link><description>子正博客</description><copyright>子正博客</copyright><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><image><url>https://avatars.githubusercontent.com/u/15809315?v=4</url><title>avatar</title><link>https://Abner1995.github.io</link></image><lastBuildDate>Sat, 28 Sep 2024 08:07:42 +0000</lastBuildDate><managingEditor>子正博客</managingEditor><ttl>60</ttl><webMaster>子正博客</webMaster><item><title>在阿里云服务器CentOS Linux release 7.9.2009中搭建Asterisk-20.9.3，并相互拨打</title><link>https://Abner1995.github.io/post/zai-a-li-yun-fu-wu-qi-CentOS%20Linux%20release%207.9.2009-zhong-da-jian-Asterisk-20.9.3%EF%BC%8C-bing-xiang-hu-bo-da.html</link><description>1.  更新或安装软件包  &#13;
   &#13;
    `yum install -y epel-release dmidecode gcc-c++ ncurses-devel libxml2-devel make wget openssl-devel newt-devel kernel-devel sqlite-devel libuuid-devel gtk2-devel jansson-devel binutils-devel libedit libedit-devel`  &#13;
&#13;
2. 一步一步执行下面命令  &#13;
    `cd /usr/src`  &#13;
&#13;
    `wget https://downloads.asterisk.org/pub/telephony/asterisk/asterisk-20-current.tar.gz`  &#13;
&#13;
    `tar -zxvf asterisk-20-current.tar.gz`  &#13;
&#13;
    `cd asterisk-20.9.3`  &#13;
&#13;
    `sudo contrib/scripts/install_prereq install`  &#13;
&#13;
    `./configure --libdir=/usr/lib64 --with-jansson-bundled`  &#13;
&#13;
    `make menuselect &amp;&amp; make &amp;&amp; sudo make install &amp;&amp; make samples &amp;&amp; make config`  &#13;
&#13;
    `service asterisk start`  &#13;
&#13;
    `asterisk -rvv`  &#13;
&#13;
 &gt; [!NOTE]  &#13;
    1. `./configure --libdir=/usr/lib64 --with-jansson-bundled     (apartir de asterisk 16: --with-jansson-bundled).`  &#13;
    2. asterisk-20-current.tar.gz下载很慢，本地下载然后FTP上传  &#13;
    3. 在configure,也需要下载文件，但是直接下载会慢，所以本地下载然后FTP上传&#13;
&#13;
3. 开始配置asterisk  &#13;
&#13;
    `cd /etc/asterisk`  &#13;
&#13;
    `mv sip.conf.sample sip.conf`  &#13;
&#13;
    ```conf&#13;
    [general]&#13;
    context=default&#13;
    nat=force_rport,comedia&#13;
    videosupport=yes&#13;
    extern_ip=x.x.x. ; 你的公共 IP 地址&#13;
    local_net=192.168.1.0/255.255.255.0 ; 你的本地网络（例如，192.168.1.0/255.255.255.0）&#13;
&#13;
    [6001]&#13;
    type=user&#13;
    context=from-internal&#13;
    host=dynamic&#13;
    secret=6001&#13;
    disallow=all&#13;
    allow=gsm&#13;
    allow=ulaw&#13;
&#13;
    [6002]&#13;
    type=user&#13;
    context=from-internal&#13;
    host=dynamic&#13;
    secret=6002&#13;
    disallow=all&#13;
    allow=gsm&#13;
    allow=ulaw&#13;
    ```  &#13;
&#13;
    `mv extensions.conf.sample extensions.conf`  &#13;
&#13;
    ```conf&#13;
    [from-internal]&#13;
    exten = 6001,1,Dial(PJSIP/6001,60)&#13;
    exten = 6002,1,Dial(PJSIP/6002,60)&#13;
&#13;
    exten = 6001,1,Dial(SIP/6001,60)&#13;
    exten = 6002,1,Dial(SIP/6002,60)&#13;
    ```  &#13;
&#13;
    `mv pjsip.conf.sample pjsip.conf`  &#13;
&#13;
    ```conf&#13;
    [port-udp]&#13;
    type=transport&#13;
    protocol=udp&#13;
    bind=0.0.0.0:5060&#13;
    external_media_address=x.x.x.x ; 你的公共 IP 地址&#13;
    external_signaling_address=x.x.x.x ; 你的公共 IP 地址&#13;
&#13;
    [general]&#13;
    extern_ip=x.x.x.x         ; 你的公共 IP 地址&#13;
    local_net=192.168.1.0/255.255.255.0  ; 你的本地网络（例如，192.168.1.0/255.255.255.0）&#13;
&#13;
    ; 设置 NAT 选项&#13;
    nat=force_rport,comedia&#13;
    videosupport=yes&#13;
&#13;
    [6001]&#13;
    type=endpoint&#13;
    context=from-internal&#13;
    disallow=all&#13;
    allow=gsm&#13;
    allow=ulaw&#13;
    auth=6001&#13;
    aors=6001&#13;
&#13;
    [6001]&#13;
    type=auth&#13;
    auth_type=userpass&#13;
    password=userpass&#13;
    username=6001&#13;
&#13;
    [6001]&#13;
    type=aor&#13;
    max_contacts=10&#13;
&#13;
    [6002]&#13;
    type=endpoint&#13;
    context=from-internal&#13;
    disallow=all&#13;
    allow=gsm&#13;
    allow=ulaw&#13;
    auth=6002&#13;
    aors=6002&#13;
&#13;
    [6002]&#13;
    type=auth&#13;
    auth_type=userpass&#13;
    password=userpass&#13;
    username=6002&#13;
&#13;
    [6002]&#13;
    type=aor&#13;
    max_contacts=10&#13;
    ```&#13;
&#13;
&gt; [!WARNING]&#13;
     1. 服务端和客户端allow=gsm要一致  &#13;
&#13;
。</description><guid isPermaLink="true">https://Abner1995.github.io/post/zai-a-li-yun-fu-wu-qi-CentOS%20Linux%20release%207.9.2009-zhong-da-jian-Asterisk-20.9.3%EF%BC%8C-bing-xiang-hu-bo-da.html</guid><pubDate>Sat, 28 Sep 2024 08:07:11 +0000</pubDate></item><item><title>dotnet WebAPI JWT使用</title><link>https://Abner1995.github.io/post/dotnet%20WebAPI%20JWT-shi-yong.html</link><description># JWT  &#13;
&#13;
## 关键词  &#13;
```shell  &#13;
Bearer&#13;
```  &#13;
&#13;
## 包&#13;
```bash  &#13;
Microsoft.IdentityModel.Tokens  &#13;
System.IdentityModel.Tokens.Jwt  &#13;
Swashbuckle.AspNetCore.Filters  &#13;
Microsoft.AspNetCore.Authentication.JwtBearer  &#13;
Microsoft.AspNetCore.Http.Abstractions  &#13;
```  &#13;
&#13;
## dotnet user-jwts CLI&#13;
```shell  &#13;
dotnet user-jwts create  &#13;
dotnet user-jwts print xxx --show-all    &#13;
dotnet user-jwts key     &#13;
dotnet user-jwts list    &#13;
```  &#13;
&#13;
## 如何使用？  &#13;
&#13;
**appsettings.json**  &#13;
&#13;
```json  &#13;
{&#13;
  'TokenSettings': {&#13;
    'Token': 'b28f1a6d8c9eac301db2ef745601948e59c0b5d7a40c29f5d0a2c7b6f3d3e8f5'&#13;
  }&#13;
}&#13;
```  &#13;
&#13;
**TokenService.cs**  &#13;
&#13;
```csharp  &#13;
using Microsoft.IdentityModel.Tokens;&#13;
using System.IdentityModel.Tokens.Jwt;&#13;
using System.Security.Claims;&#13;
using System.Security.Cryptography;&#13;
using System.Text;&#13;
&#13;
namespace ContactSMS.WebAPI.Common&#13;
{&#13;
    public class TokenService&#13;
    {&#13;
        private readonly IConfiguration _configuration;&#13;
&#13;
        public TokenService(IConfiguration configuration)&#13;
        {&#13;
            _configuration = configuration;&#13;
        }&#13;
&#13;
        public string GenerateAccessToken(IEnumerable&lt;Claim&gt; claims)&#13;
        {&#13;
            var key = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(&#13;
                _configuration.GetSection('TokenSettings:Token').Value!));&#13;
&#13;
            var creds = new SigningCredentials(key, SecurityAlgorithms.HmacSha512Signature);&#13;
&#13;
            var token = new JwtSecurityToken(&#13;
                    claims: claims,&#13;
                    expires: DateTime.Now.AddDays(1),&#13;
                    signingCredentials: creds&#13;
                );&#13;
&#13;
            return new JwtSecurityTokenHandler().WriteToken(token);&#13;
        }&#13;
&#13;
        public string GenerateRefreshToken(string id)&#13;
        {&#13;
            var claims = new[]&#13;
            {&#13;
                new Claim(ClaimTypes.Name, id)&#13;
            };&#13;
            var key = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(&#13;
               _configuration.GetSection('TokenSettings:Token').Value!));&#13;
            var creds = new SigningCredentials(key, SecurityAlgorithms.HmacSha512Signature);&#13;
            var token = new JwtSecurityToken(&#13;
                claims: claims,&#13;
                expires: DateTime.UtcNow.AddDays(7), // 刷新令牌有效期 7 天&#13;
                signingCredentials: creds);&#13;
            return new JwtSecurityTokenHandler().WriteToken(token);&#13;
        }&#13;
&#13;
        /// &lt;summary&gt;&#13;
        /// 从过期的令牌中获取用户信息&#13;
        /// &lt;/summary&gt;&#13;
        /// &lt;param name='token'&gt;&lt;/param&gt;&#13;
        /// &lt;returns&gt;&lt;/returns&gt;&#13;
        /// &lt;exception cref='SecurityTokenException'&gt;&lt;/exception&gt;&#13;
        public ClaimsPrincipal GetPrincipalFromExpiredToken(string token)&#13;
        {&#13;
            var tokenValidationParameters = new TokenValidationParameters&#13;
            {&#13;
                ValidateIssuerSigningKey = false,&#13;
                ValidateAudience = false,&#13;
                ValidateIssuer = false,&#13;
                IssuerSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(&#13;
               _configuration.GetSection('TokenSettings:Token').Value!)),&#13;
                ValidateLifetime = false // 这里不验证生命周期&#13;
            };&#13;
&#13;
            var tokenHandler = new JwtSecurityTokenHandler();&#13;
            var principal = tokenHandler.ValidateToken(token, tokenValidationParameters, out var securityToken);&#13;
&#13;
            if (securityToken is not JwtSecurityToken jwtSecurityToken ||&#13;
                !jwtSecurityToken.Header.Alg.Equals(SecurityAlgorithms.HmacSha512Signature, StringComparison.InvariantCultureIgnoreCase))&#13;
            {&#13;
                throw new SecurityTokenException('Invalid token');&#13;
            }&#13;
&#13;
            return principal;&#13;
        }&#13;
    }&#13;
}&#13;
```  &#13;
&#13;
**Program.cs**  &#13;
```csharp  &#13;
using Microsoft.AspNetCore.Authentication.JwtBearer;&#13;
using Microsoft.EntityFrameworkCore;&#13;
using Microsoft.IdentityModel.Tokens;&#13;
using Microsoft.OpenApi.Models;&#13;
using Swashbuckle.AspNetCore.Filters;&#13;
using System.Text;&#13;
&#13;
var builder = WebApplication.CreateBuilder(args);&#13;
&#13;
// Add services to the container.&#13;
&#13;
builder.Services.AddControllers();&#13;
// Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle&#13;
builder.Services.AddEndpointsApiExplorer();&#13;
builder.Services.AddSwaggerGen(options =&gt;&#13;
{&#13;
    options.AddSecurityDefinition('oauth2', new OpenApiSecurityScheme&#13;
    {&#13;
        In = ParameterLocation.Header,&#13;
        Name = 'Authorization',&#13;
        Type = SecuritySchemeType.ApiKey&#13;
    });&#13;
&#13;
    options.OperationFilter&lt;SecurityRequirementsOperationFilter&gt;();&#13;
});&#13;
&#13;
builder.Services.AddAuthentication(options =&gt;&#13;
{&#13;
    options.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;&#13;
    options.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme;&#13;
}).AddJwtBearer(options =&gt;&#13;
{&#13;
    options.TokenValidationParameters = new TokenValidationParameters&#13;
    {&#13;
        ValidateIssuerSigningKey = true,&#13;
        ValidateAudience = false,&#13;
        ValidateIssuer = false,&#13;
        ValidateLifetime = true,&#13;
        IssuerSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(&#13;
                builder.Configuration.GetSection('TokenSettings:Token').Value!))&#13;
    };&#13;
});&#13;
&#13;
builder.Services.AddSingleton&lt;IHttpContextAccessor, HttpContextAccessor&gt;();&#13;
builder.Services.AddSingleton&lt;TokenService&gt;();&#13;
&#13;
var app = builder.Build();&#13;
&#13;
// Configure the HTTP request pipeline.&#13;
if (app.Environment.IsDevelopment())&#13;
{&#13;
    app.UseSwagger();&#13;
    app.UseSwaggerUI();&#13;
}&#13;
&#13;
app.UseHttpsRedirection();&#13;
&#13;
app.UseAuthentication();&#13;
&#13;
app.UseAuthorization();&#13;
&#13;
app.MapControllers();&#13;
&#13;
app.Run();&#13;
``` &#13;
&#13;
**LoginController.cs**&#13;
```csharp  &#13;
using ContactSMS.Commons.Responses;&#13;
using ContactSMS.Commons.Util;&#13;
using ContactSMS.Domain;&#13;
using ContactSMS.Domain.Dto;&#13;
using ContactSMS.Domain.Entity;&#13;
using ContactSMS.WebAPI.Common;&#13;
using ContactSMS.WebAPI.Controllers.Request;&#13;
using ContactSMS.WebAPI.Controllers.Responses;&#13;
using Microsoft.AspNetCore.Authorization;&#13;
using Microsoft.AspNetCore.Mvc;&#13;
using Microsoft.Extensions.Configuration;&#13;
using Microsoft.IdentityModel.Tokens;&#13;
using System.IdentityModel.Tokens.Jwt;&#13;
using System.Security.Claims;&#13;
using System.Text;&#13;
&#13;
namespace ContactSMS.WebAPI.Controllers&#13;
{&#13;
    [Route('api/[controller]/[action]')]&#13;
    [ApiController]&#13;
    public class LoginController : ControllerBase&#13;
    {&#13;
        private readonly ILoginRepository _loginRepository;&#13;
        private readonly IUserRepository _userRepository;&#13;
        private readonly IConfiguration _configuration;&#13;
        private readonly TokenService _tokenService;&#13;
&#13;
        public LoginController(ILoginRepository loginRepository, IUserRepository userRepository, IConfiguration configuration, TokenService tokenService)&#13;
        {&#13;
            this._loginRepository = loginRepository;&#13;
            this._userRepository = userRepository;&#13;
            this._configuration = configuration;&#13;
            this._tokenService = tokenService;&#13;
        }&#13;
&#13;
        [HttpPost]&#13;
        public async Task&lt;IActionResult&gt; Login([FromBody] LoginRequest loginRequest)&#13;
        {&#13;
            ServiceResponse&lt;TokenResponse&gt; resp = new ServiceResponse&lt;TokenResponse&gt;();&#13;
            if (string.IsNullOrEmpty(loginRequest.UserName) ||&#13;
                string.IsNullOrEmpty(loginRequest.PassWord))&#13;
            {&#13;
                resp.Success = false;&#13;
                resp.Message = '用户名或密码不能为空';&#13;
                return BadRequest(resp);&#13;
            }&#13;
&#13;
            var existingUser = await this._userRepository.GetUserByUserNameAsync(loginRequest.UserName);&#13;
            if (existingUser == null)&#13;
            {&#13;
                resp.Success = false;&#13;
                resp.Message = '用户或密码错误';&#13;
                return BadRequest(resp);&#13;
            }&#13;
            bool isVerify = PassWordUtil.VerifyPassword(existingUser.PassWord, loginRequest.PassWord);&#13;
            if (!isVerify)&#13;
            {&#13;
                resp.Success = false;&#13;
                resp.Message = '密码错误';&#13;
                return BadRequest(resp);&#13;
            }&#13;
            //string token = CreateToken(existingUser);&#13;
            string Id = existingUser.Id.ToString();&#13;
            List&lt;Claim&gt; claims = new List&lt;Claim&gt; {&#13;
                new Claim(ClaimTypes.NameIdentifier, Id),&#13;
                new Claim(ClaimTypes.Name, existingUser.UserName),&#13;
            };&#13;
            string accessToken = this._tokenService.GenerateAccessToken(claims);&#13;
            var refreshToken = _tokenService.GenerateRefreshToken(existingUser.UserName);&#13;
            var tokenResponse = new TokenResponse()&#13;
            {&#13;
                AccessToken = accessToken,&#13;
                RefreshToken = refreshToken&#13;
            };&#13;
            resp.Success = true;&#13;
            resp.Message = '获取成功';&#13;
            resp.Data = tokenResponse;&#13;
            return Ok(resp);&#13;
        }&#13;
    }&#13;
}&#13;
```  &#13;
&#13;
**TokenController.cs**  &#13;
```csharp  &#13;
using ContactSMS.Commons.Responses;&#13;
using ContactSMS.WebAPI.Common;&#13;
using ContactSMS.WebAPI.Controllers.Request;&#13;
using ContactSMS.WebAPI.Controllers.Responses;&#13;
using Microsoft.AspNetCore.Authorization;&#13;
using Microsoft.AspNetCore.Mvc;&#13;
&#13;
namespace ContactSMS.WebAPI.Controllers&#13;
{&#13;
    [Route('api/[controller]/[action]')]&#13;
    [ApiController]&#13;
    [Authorize]&#13;
    public class TokenController : ControllerBase&#13;
    {&#13;
        private readonly TokenService _tokenService;&#13;
&#13;
        public TokenController(TokenService tokenService)&#13;
        {&#13;
            this._tokenService = tokenService;&#13;
        }&#13;
&#13;
        [HttpPost]&#13;
        public IActionResult Refresh([FromBody] RefreshTokenRequest request)&#13;
        {&#13;
            // 验证刷新令牌&#13;
            //var isValid = ValidateRefreshToken(request.RefreshToken, request.UserName); // 使用新的刷新令牌验证逻辑&#13;
&#13;
            //if (!isValid)&#13;
            //{&#13;
            //    return Unauthorized('Invalid refresh token');&#13;
            //}&#13;
            try&#13;
            {&#13;
                var principal = _tokenService.GetPrincipalFromExpiredToken(request.AccessToken);&#13;
                var username = principal.Identity.Name;&#13;
                var newAccessToken = _tokenService.GenerateAccessToken(principal.Claims);&#13;
                var newRefreshToken = _tokenService.GenerateRefreshToken(username);&#13;
                ServiceResponse&lt;TokenResponse&gt; resp = new ServiceResponse&lt;TokenResponse&gt;();&#13;
                var tokenResponse = new TokenResponse()&#13;
                {&#13;
                    AccessToken = newAccessToken,&#13;
                    RefreshToken = newRefreshToken&#13;
                };&#13;
                resp.Success = true;&#13;
                resp.Message = '获取成功';&#13;
                resp.Data = tokenResponse;&#13;
                return Ok(resp);&#13;
            }&#13;
            catch&#13;
            {&#13;
                return Unauthorized();&#13;
            }&#13;
        }&#13;
&#13;
        private bool ValidateRefreshToken(string refreshToken, string username)&#13;
        {&#13;
            // 解析和验证刷新令牌&#13;
            try&#13;
            {&#13;
                // 从刷新令牌中获取声明信息&#13;
                var principal = _tokenService.GetPrincipalFromExpiredToken(refreshToken);&#13;
&#13;
                // 从声明中提取用户名并进行匹配&#13;
                var tokenUsername = principal.Identity?.Name;&#13;
&#13;
                // 检查令牌中的用户名是否匹配&#13;
                return tokenUsername == username;&#13;
            }&#13;
            catch (Exception)&#13;
            {&#13;
                // 如果出现异常，表示令牌无效&#13;
                return false;&#13;
            }&#13;
        }&#13;
    }&#13;
}&#13;
```  。</description><guid isPermaLink="true">https://Abner1995.github.io/post/dotnet%20WebAPI%20JWT-shi-yong.html</guid><pubDate>Sun, 01 Sep 2024 09:24:04 +0000</pubDate></item><item><title>如何利用dotnet maui CollectionView实现聊天页面</title><link>https://Abner1995.github.io/post/ru-he-li-yong-dotnet%20maui%20CollectionView-shi-xian-liao-tian-ye-mian.html</link><description>**MessageDetailPage.xaml**&#13;
&#13;
```&#13;
&lt;?xml version='1.0' encoding='utf-8' ?&gt;&#13;
&lt;ContentPage&#13;
    x:Class='ContactSMS.Client.Views.MessageDetailPage'&#13;
    xmlns='http://schemas.microsoft.com/dotnet/2021/maui'&#13;
    xmlns:x='http://schemas.microsoft.com/winfx/2009/xaml'&#13;
    xmlns:model='clr-namespace:ContactSMS.Client.Models'&#13;
    xmlns:templates='clr-namespace:ContactSMS.Client.Views.Templates'&#13;
    xmlns:vm='clr-namespace:ContactSMS.Client.ViewModels'&#13;
    Title='消息详情'&#13;
    x:DataType='vm:MessageViewModel'&gt;&#13;
&#13;
    &lt;ContentPage.Resources&gt;&#13;
        &lt;ResourceDictionary&gt;&#13;
&#13;
            &lt;DataTemplate x:Key='ReceiverChatMessageItemTemplate' x:DataType='model:MessageDetailModel'&gt;&#13;
                &lt;templates:ReceiverChatMessageItemTemplate /&gt;&#13;
            &lt;/DataTemplate&gt;&#13;
&#13;
            &lt;DataTemplate x:Key='SenderChatMessageItemTemplate' x:DataType='model:MessageDetailModel'&gt;&#13;
                &lt;templates:SenderChatMessageItemTemplate /&gt;&#13;
            &lt;/DataTemplate&gt;&#13;
&#13;
            &lt;templates:MessageDataTemplateSelector&#13;
                x:Key='MessageDataTemplateSelector'&#13;
                ReceiverMessageTemplate='{StaticResource ReceiverChatMessageItemTemplate}'&#13;
                SenderMessageTemplate='{StaticResource SenderChatMessageItemTemplate}' /&gt;&#13;
&#13;
            &lt;Style x:Key='ChatCollectionStyle' TargetType='CollectionView'&gt;&#13;
                &lt;Setter Property='Margin' Value='20' /&gt;&#13;
            &lt;/Style&gt;&#13;
        &lt;/ResourceDictionary&gt;&#13;
    &lt;/ContentPage.Resources&gt;&#13;
&#13;
&#13;
    &lt;ScrollView&gt;&#13;
&#13;
        &lt;CollectionView&#13;
            ItemTemplate='{StaticResource MessageDataTemplateSelector}'&#13;
            ItemsSource='{Binding Messages}'&#13;
            Style='{StaticResource ChatCollectionStyle}' /&gt;&#13;
&#13;
    &lt;/ScrollView&gt;&#13;
&#13;
&#13;
&lt;/ContentPage&gt;&#13;
```&#13;
&#13;
**SenderChatMessageItemTemplate**&#13;
&#13;
```&#13;
&lt;?xml version='1.0' encoding='utf-8' ?&gt;&#13;
&lt;ContentView&#13;
    x:Class='ContactSMS.Client.Views.Templates.SenderChatMessageItemTemplate'&#13;
    xmlns='http://schemas.microsoft.com/dotnet/2021/maui'&#13;
    xmlns:x='http://schemas.microsoft.com/winfx/2009/xaml'&#13;
    xmlns:model='clr-namespace:ContactSMS.Client.Models'&#13;
    x:DataType='model:MessageDetailModel'&gt;&#13;
&#13;
    &lt;ContentView.Resources&gt;&#13;
        &lt;ResourceDictionary&gt;&#13;
            &lt;Style x:Key='SenderContainerStyle' TargetType='Grid'&gt;&#13;
                &lt;Setter Property='HorizontalOptions' Value='End' /&gt;&#13;
                &lt;Setter Property='Margin' Value='0,15' /&gt;&#13;
            &lt;/Style&gt;&#13;
&#13;
            &lt;Style x:Key='MessageTextStyle' TargetType='Label'&gt;&#13;
                &lt;Setter Property='FontSize' Value='14' /&gt;&#13;
                &lt;Setter Property='TextColor' Value='Black' /&gt;&#13;
                &lt;Setter Property='Padding' Value='10' /&gt;&#13;
            &lt;/Style&gt;&#13;
&#13;
            &lt;Color x:Key='MessageColor'&gt;#D8E9F1&lt;/Color&gt;&#13;
&#13;
            &lt;Style x:Key='MessageShapeStyle' TargetType='BoxView'&gt;&#13;
                &lt;Setter Property='Color' Value='{StaticResource MessageColor}' /&gt;&#13;
                &lt;Setter Property='CornerRadius' Value='24, 0, 24, 24' /&gt;&#13;
            &lt;/Style&gt;&#13;
&#13;
            &lt;Style x:Key='MessageTimeStyle' TargetType='Label'&gt;&#13;
                &lt;Setter Property='TextColor' Value='#A5A4A9' /&gt;&#13;
                &lt;Setter Property='HorizontalOptions' Value='End' /&gt;&#13;
                &lt;Setter Property='Margin' Value='0,5,0,0' /&gt;&#13;
            &lt;/Style&gt;&#13;
&#13;
        &lt;/ResourceDictionary&gt;&#13;
    &lt;/ContentView.Resources&gt;&#13;
&#13;
    &lt;Grid RowDefinitions='*,20' Style='{StaticResource SenderContainerStyle}'&gt;&#13;
        &lt;Grid&gt;&#13;
            &lt;BoxView Style='{StaticResource MessageShapeStyle}' /&gt;&#13;
            &lt;Label Style='{StaticResource MessageTextStyle}' Text='{Binding Content}' /&gt;&#13;
        &lt;/Grid&gt;&#13;
        &lt;Label&#13;
            Grid.Row='1'&#13;
            Style='{StaticResource MessageTimeStyle}'&#13;
            Text='{Binding Date}' /&gt;&#13;
    &lt;/Grid&gt;&#13;
&#13;
&lt;/ContentView&gt;&#13;
```&#13;
&#13;
**ReceiverChatMessageItemTemplate.xaml**&#13;
&#13;
```&#13;
&lt;?xml version='1.0' encoding='utf-8' ?&gt;&#13;
&lt;ContentView&#13;
    x:Class='ContactSMS.Client.Views.Templates.ReceiverChatMessageItemTemplate'&#13;
    xmlns='http://schemas.microsoft.com/dotnet/2021/maui'&#13;
    xmlns:x='http://schemas.microsoft.com/winfx/2009/xaml'&#13;
    xmlns:model='clr-namespace:ContactSMS.Client.Models'&#13;
    x:DataType='model:MessageDetailModel'&gt;&#13;
&#13;
    &lt;ContentView.Resources&gt;&#13;
        &lt;ResourceDictionary&gt;&#13;
            &lt;Style x:Key='ReceiverContainerStyle' TargetType='Grid'&gt;&#13;
                &lt;Setter Property='HorizontalOptions' Value='Start' /&gt;&#13;
            &lt;/Style&gt;&#13;
&#13;
            &lt;Style x:Key='MessageTextStyle' TargetType='Label'&gt;&#13;
                &lt;Setter Property='FontSize' Value='14' /&gt;&#13;
                &lt;Setter Property='TextColor' Value='Black' /&gt;&#13;
                &lt;Setter Property='Padding' Value='10' /&gt;&#13;
                &lt;Setter Property='Margin' Value='0,0,0,5' /&gt;&#13;
            &lt;/Style&gt;&#13;
&#13;
            &lt;Color x:Key='MessageColor'&gt;#9297A1&lt;/Color&gt;&#13;
&#13;
            &lt;Style x:Key='MessageShapeStyle' TargetType='BoxView'&gt;&#13;
                &lt;Setter Property='Color' Value='{StaticResource MessageColor}' /&gt;&#13;
                &lt;Setter Property='CornerRadius' Value='0, 24, 24, 24' /&gt;&#13;
            &lt;/Style&gt;&#13;
&#13;
            &lt;Style x:Key='MessageTimeStyle' TargetType='Label'&gt;&#13;
                &lt;Setter Property='TextColor' Value='#A5A4A9' /&gt;&#13;
                &lt;Setter Property='HorizontalOptions' Value='Start' /&gt;&#13;
                &lt;Setter Property='Margin' Value='0,5,0,0' /&gt;&#13;
            &lt;/Style&gt;&#13;
&#13;
        &lt;/ResourceDictionary&gt;&#13;
    &lt;/ContentView.Resources&gt;&#13;
&#13;
    &lt;Grid RowDefinitions='*,20' Style='{StaticResource ReceiverContainerStyle}'&gt;&#13;
        &lt;Grid&gt;&#13;
            &lt;BoxView Style='{StaticResource MessageShapeStyle}' /&gt;&#13;
            &lt;Label Style='{StaticResource MessageTextStyle}' Text='{Binding Content}' /&gt;&#13;
        &lt;/Grid&gt;&#13;
        &lt;Label&#13;
            Grid.Row='1'&#13;
            Style='{StaticResource MessageTimeStyle}'&#13;
            Text='{Binding Date}' /&gt;&#13;
    &lt;/Grid&gt;&#13;
&#13;
&lt;/ContentView&gt;&#13;
```&#13;
&#13;
**MessageDataTemplateSelector.cs 必须要是public，**&#13;
&#13;
```&#13;
namespace ContactSMS.Client.Views.Templates&#13;
{&#13;
    public class MessageDataTemplateSelector : DataTemplateSelector&#13;
    {&#13;
        public DataTemplate SenderMessageTemplate { get; set; }&#13;
        public DataTemplate ReceiverMessageTemplate { get; set; }&#13;
&#13;
        protected override DataTemplate OnSelectTemplate(object item, BindableObject container)&#13;
        {&#13;
            var message = (MessageDetailModel)item;&#13;
&#13;
            if (message.UserId == 0)&#13;
                return ReceiverMessageTemplate;&#13;
&#13;
            return SenderMessageTemplate;&#13;
        }&#13;
    }&#13;
}&#13;
```。</description><guid isPermaLink="true">https://Abner1995.github.io/post/ru-he-li-yong-dotnet%20maui%20CollectionView-shi-xian-liao-tian-ye-mian.html</guid><pubDate>Sat, 31 Aug 2024 02:36:58 +0000</pubDate></item></channel></rss>